!function(t){function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var i={};return e.m=t,e.c=i,e.p="./",e(0)}([function(t,e,i){!function(){"use strict";var t=(i(1),L.LayerGroup.prototype.onRemove),e={onRemove:function(e){this.disableAutoLabel(),t.call(this,e)},enableAutoLabel:function(t){this._map&&this._map.autoLabeler&&(this._al_options=t||{},this._al_options.labelStyle=t.labelStyle||"fill: lime; stroke: #000000;  font-size: 20px;",this._al_options.propertyName=t.propertyName||"name",this._al_options.priority=t.priority||0,this._al_options.zoomToStartLabel=t.zoomToStartLabel||this._map.autoLabeler.options.zoomToStartLabel,this._map.autoLabeler.addLayer(this))},autoLabelEnabled:function(){return!!this._map.autoLabeler&&this._map.autoLabeler.hasLayer(this)},disableAutoLabel:function(){return this._map.autoLabeler?void(this._map.autoLabeler.remLayer(this)&&delete this._al_options):void delete this._al_options}};L.LayerGroup.include(e),L.Map.addInitHook(function(){this.whenReady(function(){this.options.autolabel&&(this.autoLabeler=L.autoLabeler(this,this.options.autolabelOptions))})})}()},function(t,e,i){var n=(i(2),i(3),i(9)),o=i(12);L.AutoLabeler=L.Evented.extend({_nodes:[],_layers2label:[],options:{showBBoxes:!1,debug:!0,labelsDelay:1e3,checkLabelsInside:!0,zoomToStartLabel:13,minimizeTotalOverlappingArea:!1,deleteIfNoSolution:!1,doNotShowIfSegIsTooSmall:!1,annealingOptions:{}},_autoLabel:!1,initialize:function(t,e){L.setOptions(this,e),this._map=t},hasLayer:function(t){return this._layers2label.indexOf(t)!=-1},addLayer:function(t){this.hasLayer(t)||this._layers2label.push(t)},remLayer:function(t){var e=this._layers2label.indexOf(t);return e>=0&&this._layers2label.splice(e,1),e>=0},toggleAutoLabelling:function(){this._autoLabel?this.disableAutoLabel():this.enableAutoLabel()},enableAutoLabel:function(){return this._map?this._map.options.renderer?(this._map.options.renderer.on("update",this._apply_doAutoLabel),this._map.on("zoomstart",function(){this._zoomstarttrig=1}),this._map.on("zoomend",function(){this._zoomstarttrig=0}),void(this._autoLabel=!0)):void this._dodebug("renderer is invalid"):void this._dodebug("no map attached")},_zoomstarttrig:0,_ctimerID:-1,disableAutoLabel:function(){this._map.options.renderer.off("update",this._apply_doAutoLabel),this._autoLabel=!1},_apply_doAutoLabel:function(){if(this._map.autoLabeler._ctimerID!=-1&&clearTimeout(this._map.autoLabeler._ctimerID),0==this._map.autoLabeler._zoomstarttrig){var t=this._map.autoLabeler,e=this._map.autoLabeler.options.labelsDelay;this._map.autoLabeler._ctimerID=setTimeout(function(){t._doAutoLabel()},e)}this._map.autoLabeler._clearNodes()},_dodebug:function(t){this.options.debug&&console.log(t)},_doAutoLabel:function(){if(this._autoLabel)if(this._map.getZoom()>this.options.zoomToStartLabel){o._map=this._map;var t=o.readDataToLabel(this._map);if(o.prepareCurSegments(t,{maxlabelcount:80}),0==t.length)return void this._clearNodes();var e=n.getInitialRandomState(t);this._renderNodes(e)}else this._clearNodes()},_createPolygonNode:function(t,e){for(var i=L.SVG.create("polygon"),n="",o=0;o<t.length;o++)n+=t[o].x+","+t[o].y+" ";return i.setAttribute("points",n.trim()),e?i.setAttribute("style","fill: red; fill-opacity:0.3; stroke: black;"):i.setAttribute("style","fill: yellow; fill-opacity:0.1; stroke: black;"),i},_clearNodes:function(){for(var t=this._map.options.renderer._container,e=0;e<this._nodes.length;e++)t.removeChild(this._nodes[e]);this._nodes=[]},_renderNodes:function(t){var e=this._map.options.renderer._container;this._clearNodes();for(var i in t)if(this.options.showBBoxes){var n=this._createPolygonNode(t[i].poly(),t[i].overlaps);e.appendChild(n),this._nodes.push(n)}}}),L.autoLabeler=function(t,e){return new L.AutoLabeler(t,e)}},function(t,e,i){"use strict";var n=i(3);t.exports={convertClientRectToArrayOfArrays:function(t){var e=[],i=.2*t.height;return e.push([0,0]),e.push([0,-t.height]),e.push([t.width,-t.height]),e.push([t.width,0]),e=n.movePolyByAdding(e,[0,i])},getBoundingBox:function(t,e){var i=t.options.renderer._container;i.appendChild(e);var n=e.getBoundingClientRect();return i.removeChild(e),L.point(n.width,n.height)},createSVGTextNode:function(t,e){t=t.replace(/ /g,"Â ");var i=L.SVG.create("text");return i.setAttribute("style",e),i.textContent=t,i}}},function(t,e,i){"use strict";var n=i(4),o={computeSegmentsLengths:function(t){for(var e=[],i=1;i<t.length;i++)e.push(t[i].distanceTo(t[i-1]));return e},translateSegment:function(t,e,i){var n=[];return n.push(t.add(i)),n.push(e.add(i)),n},computeSlope:function(t,e){var i=(e.y-t.y)/(e.x-t.x),n=t.y-i*t.x;return L.point(i,n)},lineIntersection:function(t,e,i,n){var o=this.computeSlope(t,e),r=this.computeSlope(i,n);if(o.x!==r.x){var s=(r.y-o.y)/(o.x-r.x),a=o.x*s+o.y;return L.point(s,a)}},getNormalOnSegment:function(t,e){var i=this.computeSlope(t,e);return this.normalizePt(i)},get2dVectorLength:function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},normalizePt:function(t){return 0===t.x&&0===t.y?0:t.divideBy(this.get2dVectorLength(t))},translateByNormals:function(t,e){for(var i=[],n=0;n<t.length-1;n++){var o=this.getNormalOnSegment(t[n],t[n+1]).multiplyBy(e),r=this.translateSegment(t[n],t[n+1],o);if(n>0){var s=this.lineIntersection(i[i.length-2],i[i.length-1],r[0],r[1]);i[i.length-1]=s,i.push(r[1])}else i.push(r[0]),i.push(r[1])}return i},interpolateOnPointSegment:function(t,e,i){return L.point(t.x*(1-i)+i*e.x,t.y*(1-i)+i*e.y)},getSegmentIdxAndDistByOffset:function(t,e,i){for(var n=0,o=0;o<e.length-1;o++)if(n+=i[o],t<=n)return[o,n]},getIndexBasedOnTotalLengthRandom:function(t,e,i){for(var n=Math.random()*i,o=0,r=0;r<t.length-1&&(o+=e[r],!(o>n));r++);return r},extractSubPolylineByOffsetValues:function(t,e,i,n){for(var o=this.getSegmentIdxAndDistByOffset(t,i,n),r=this.getSegmentIdxAndDistByOffset(e,i,n),s=this.interpolateOnPointSegment(i[o[0]],i[o[0]+1],(o[1]-t)/n[o[0]]),a=this.interpolateOnPointSegment(i[r[0]],i[r[0]+1],(r[1]-e)/n[r[0]]),l=[s],u=o[0]+1;u<=r[0];u++)l.push(i[u]);return l.push(a),l},computeLineBoundaryPolygon:function(t,e){var i=t.slice(0),n=this.translateByNormals(t,e);return Array.prototype.push.apply(i,n.reverse()),i},clipPoly:function(t,e){var i=n.intersection(t,e);return i?i.length>0?i[0]:void 0:[]},addPoly:function(t,e){var i=n.union(t,e);return i?i.length>0?i[0]:void 0:[]},subtractPoly:function(t,e){var i=n.diff(t,e);return i?i:[]},polyArea:function(t){var e=0;if(t){var t=t.slice(0);t.length>2&&t.push(t[0]);for(var i=0;i<t.length-1;i++){var n=t[i+1][0]-t[i][0],o=t[i+1][1]-t[i][1];e+=+t[i][0]*o-t[i][1]*n}e=.5*e}return e},checkOverLappingArea:function(t,e,i){var n=this.clipPoly(t,e);if(i){var o=this.polyArea(n);return o}return n.length>0?1:0},rotatePoly:function(t,e,i){for(var n=[],o=i*Math.PI/180,r=0;r<t.length;r++){var s=t[r],a=Math.cos(o)*(s[0]-e[0])-Math.sin(o)*(s[1]-e[1])+e[0],l=Math.sin(o)*(s[0]-e[0])+Math.cos(o)*(s[1]-e[1])+e[1];n.push([a,l])}return n},movePolyByAdding:function(t,e){for(var i=t.slice(0),n=0;n<t.length;n++)i[n][0]+=e[0],i[n][1]+=e[1];return i},movePolyByMovingTo:function(t,e){var i=t.slice(0);e[0]=e[0]-t[0][0],e[1]=e[1]-t[0][1];for(var n=1;n<t.length;n++)i[n][0]+=e[0],i[n][1]+=e[1];return i},createPoly:function(t,e){}};t.exports=o},function(t,e,i){var n=i(5);t.exports={union:function(t,e){return n(t,e,!1,!1)},intersection:function(t,e){return n(t,e,!0,!0)},diff:function(t,e){return n(t,e,!1,!0)},clip:n}},function(t,e,i){var n=i(6);t.exports=function(t,e,i,o){var r,s=new n(t),a=new n(e),r=s.clip(a,i,o);return r}},function(t,e,i){var n=i(7),o=i(8),r=function(t,e){this.first=null,this.vertices=0,this._lastUnprocessed=null,this._arrayVertices="undefined"==typeof e?Array.isArray(t[0]):e;for(var i=0,o=t.length;i<o;i++)this.addVertex(new n(t[i]))};r.prototype.addVertex=function(t){if(null==this.first)this.first=t,this.first.next=t,this.first.prev=t;else{var e=this.first,i=e.prev;e.prev=t,t.next=e,t.prev=i,i.next=t}this.vertices++},r.prototype.insertVertex=function(t,e,i){for(var n,o=e;!o.equals(i)&&o._distance<t._distance;)o=o.next;t.next=o,n=o.prev,t.prev=n,n.next=t,o.prev=t,this.vertices++},r.prototype.getNext=function(t){for(var e=t;e._isIntersection;)e=e.next;return e},r.prototype.getFirstIntersect=function(){var t=this._firstIntersect||this.first;do{if(t._isIntersection&&!t._visited)break;t=t.next}while(!t.equals(this.first));return this._firstIntersect=t,t},r.prototype.hasUnprocessed=function(){var t=this._lastUnprocessed||this.first;do{if(t._isIntersection&&!t._visited)return this._lastUnprocessed=t,!0;t=t.next}while(!t.equals(this.first));return this._lastUnprocessed=null,!1},r.prototype.getPoints=function(){var t=[],e=this.first;if(this._arrayVertices){do t.push([e.x,e.y]),e=e.next;while(e!==this.first)}else do t.push({x:e.x,y:e.y}),e=e.next;while(e!==this.first);return t},r.prototype.clip=function(t,e,i){var s,a,l=this.first,u=t.first;do{if(!l._isIntersection)do{if(!u._isIntersection){var h=new o(l,this.getNext(l.next),u,t.getNext(u.next));if(h.valid()){var p=n.createIntersection(h.x,h.y,h.toSource),c=n.createIntersection(h.x,h.y,h.toClip);p._corresponding=c,c._corresponding=p,this.insertVertex(p,l,this.getNext(l.next)),t.insertVertex(c,u,t.getNext(u.next))}}u=u.next}while(!u.equals(t.first));l=l.next}while(!l.equals(this.first));l=this.first,u=t.first,s=l.isInside(t),a=u.isInside(this),e^=s,i^=a;do l._isIntersection&&(l._isEntry=e,e=!e),l=l.next;while(!l.equals(this.first));do u._isIntersection&&(u._isEntry=i,i=!i),u=u.next;while(!u.equals(t.first));for(var d=[];this.hasUnprocessed();){var f=this.getFirstIntersect(),_=new r([],this._arrayVertices);_.addVertex(new n(f.x,f.y));do{if(f.visit(),f._isEntry){do f=f.next,_.addVertex(new n(f.x,f.y));while(!f._isIntersection)}else do f=f.prev,_.addVertex(new n(f.x,f.y));while(!f._isIntersection);f=f._corresponding}while(!f._visited);d.push(_.getPoints())}return 0===d.length&&(s&&d.push(this.getPoints()),a&&d.push(t.getPoints()),0===d.length&&(d=null)),d},t.exports=r},function(t,e){var i=function(t,e){1===arguments.length&&(Array.isArray(t)?(e=t[1],t=t[0]):(e=t.y,t=t.x)),this.x=t,this.y=e,this.next=null,this.prev=null,this._corresponding=null,this._distance=0,this._isEntry=!0,this._isIntersection=!1,this._visited=!1};i.createIntersection=function(t,e,n){var o=new i(t,e);return o._distance=n,o._isIntersection=!0,o._isEntry=!1,o},i.prototype.visit=function(){this._visited=!0,null===this._corresponding||this._corresponding._visited||this._corresponding.visit()},i.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},i.prototype.isInside=function(t){var e=!1,i=t.first,n=i.next,o=this.x,r=this.y;do(i.y<r&&n.y>=r||n.y<r&&i.y>=r)&&(i.x<=o||n.x<=o)&&(e^=i.x+(r-i.y)/(n.y-i.y)*(n.x-i.x)<o),i=i.next,n=i.next||t.first;while(!i.equals(t.first));return e},t.exports=i},function(t,e){var i=function(t,e,i,n){this.x=0,this.y=0,this.toSource=0,this.toClip=0;var o=(n.y-i.y)*(e.x-t.x)-(n.x-i.x)*(e.y-t.y);0!==o&&(this.toSource=((n.x-i.x)*(t.y-i.y)-(n.y-i.y)*(t.x-i.x))/o,this.toClip=((e.x-t.x)*(t.y-i.y)-(e.y-t.y)*(t.x-i.x))/o,this.valid()&&(this.x=t.x+this.toSource*(e.x-t.x),this.y=t.y+this.toSource*(e.y-t.y)))};i.prototype.valid=function(){return 0<this.toSource&&this.toSource<1&&0<this.toClip&&this.toClip<1},t.exports=i},function(t,e,i){"use strict";var n=i(3),o=i(10),r={getInitialRandomState:function(t){for(var e=[],i=0;i<t.length;i++){var n=o.computeLabelCandidate(i,t);e.push(n)}return e},assignCostFunctionValuesToLastEl:function(t){var e=0;for(var i in t)e+=t[i];t.push(e)},evaluateCurSet:function(t){var e=[];for(var i in t)for(var o in t)if(i>o){var r=n.checkOverLappingArea(t[i].poly(),t[o].poly(),this.options.minimizeTotalOverlappingArea);e.push(r)}return this.assignCostFunctionValuesToLastEl(e),e},markOveralppedLabels:function(t,e){var i=0;for(var n in t)for(var o in t)n>o&&(e[i]>0&&(t[n].overlaps=!0,t[o].overlaps=!0),i++)},getOverlappingLabelsIndexes:function(t,e){var i=0,n=[];for(var o in e)for(var r in e)o>r&&(t[i]>0&&(n.push(o),n.push(r)),i++);return n},swapCandidateInLabelSetToNew:function(t,e,i){var n=e[t].all_items_index(),r=o.computeLabelCandidate(n,i);e[t]=r},applyNewPositionsForLabelsInArray:function(t,e,i){for(var n in t)this.swapCandidateInLabelSetToNew(t[n],e,i)},evaluateAfterSeveralChanged:function(t,e,i){for(var n=0;i.length>0;)for(var o=i.pop(),r=0;r<e.length;r++)for(var s=0;s<e.length;s++)if(r>s){if(r===o||s===o){var a=this.checkOverLappingArea(e[r].poly(),e[s].poly(),this.options.minimizeTotalOverlappingArea);t[n]=a}n++}t.pop(),this.assignCostFunctionValuesToLastEl(t)},dodebug:function(t){this.options.debug&&console.log(t)},processOptions:function(t){this.options=t||{},this.options.t0=this.options.t0||2.5,this.options.decrease_value=this.options.decrease_value||.9,this.options.tmin=this.options.tmin||0,this.options.constant_temp_repositionings=this.options.constant_temp_repositionings||10,this.options.max_improvments_count=this.options.max_improvments_count||10,this.options.max_noimprove_count=this.options.max_noimprove_count||20,this.options.maxsteps=this.options.maxsteps||100,this.options.maxtotaliterations=this.options.maxtotaliterations||1e5,this.options.minimizeTotalOverlappingArea=this.options.minimizeTotalOverlappingArea||!1,this.options.debug=this.options.debug||!0,this.options.allowBothSidesOfLine=this.options.allowBothSidesOfLine||!0,o.options.lineDiscreteStepPx=this.options.lineDiscreteStepPx||o.options.lineDiscreteStepPx},perform:function(t,e,i,n){if(t.length<1)i([]);else{var o=performance.now();this.processOptions(e);var r=this.getInitialRandomState(t),s=this.evaluateCurSet(r),a=this.options.t0,l=0,u=(0===s[s.length-1],0),h=this,p=function(){h.dodebug("overlapping labels count = "+s.pop()+", total labels count = "+r.length+", iterations = "+u),h.dodebug("time to annealing = "+(performance.now()-o)),h.markOveralppedLabels(r,s),i.call(n,r)}}for(;;){if(a<=this.options.tmin||l>=this.options.maxsteps)return void p();l++;for(var c=0,d=0,f=0;f<this.options.constant_temp_repositionings*r.length;f++){var _=s.slice(0),y=r.slice(0),v=this.getOverlappingLabelsIndexes(s,r);if(this.applyNewPositionsForLabelsInArray(v,r,t),this.evaluateAfterSeveralChanged(s,r,v),u++,0===s[s.length-1])return h.dodebug("strict solution"),void p();if(u>this.options.maxtotaliterations)return void p();var m=_[_.length-1]-s[s.length-1];if(m<0){var g=1-Math.exp(m/a);g>Math.random()?(s=_,r=y,d++):(c++,d=0)}else c++,d=0;if(d>=this.options.max_noimprove_count*r.length)return h.dodebug("stable state, finish on it"),void p();if(c>=this.options.max_improvments_count*r.length)break}a*=this.options.decrease_value}}};t.exports=r},function(t,e,i){var n=(i(3),i(11)),o={options:{lineDiscreteStepPx:3},obtainCandidateForPoint:function(t){},obtainCandidateForPoly:function(t){},obtainCandidateForPolyLineByRandomStartOffset:function(t){var e=t.totalLength*Math.random(),i=n.candidatePosition(e,t);return i},computeLabelCandidate:function(t,e){var i;switch(e[t].layer_type()){case 0:break;case 1:i=this.obtainCandidateForPolyLineByRandomStartOffset(e[t]);break;case 2:}return i}};t.exports=o},function(t,e,i){var n=i(3);t.exports={labelItem:function(t,e,i,o){var r={data:[],txNode:t,txSize:e,layer:i,host:o,index:function(){return this.host.lastIndexOf(this)},readData:function(){return!1},layer_type:function(){return this._layer_type||(this._layer_type=this.layer._parts.length>0?1:0),this._layer_type}};if(0!=r.layer_type()){if(r.readData=function(t){if(!t)var t=0;this.data=this.layer._parts[t],this.partIndex=t;var e=++t;return e<this.layer._parts.length&&e},1==r.layer_type()){if(0==r.layer._parts.length)return;r.computed_lengths=[],r.totalLength=0,r.segCount=function(){return this.data.length-1},r.getSegmentIdxAndDistByOffset=function(t){return n.getSegmentIdxAndDistByOffset(t,this.data,this.computed_lengths)},r.getIndexBasedOnTotalLengthRandom=function(){return n.getIndexBasedOnTotalLengthRandom(this.data,this.computed_lengths,this.totalLength)}}return r}},candidatePosition:function(t,e){return{_item:e,offset_or_origin:t,_poly:!1,all_items_index:function(){return this._item.index()},_computePolyForLine:function(t,e){var i=t+e.txSize.x,o=i<e.totalLength?i:e.totalLength,r=n.extractSubPolylineByOffsetValues(t,o,e.data,e.computed_lengths);return n.computeLineBoundaryPolygon(r,e.txSize.y)},_computePoly:function(){switch(e.layer_type()){case 0:break;case 1:this._poly=this._computePolyForLine(this.offset_or_origin,this._item);case 2:}},poly:function(){return this._poly||this._computePoly(),this._poly}}}}},function(t,e,i){"use strict";var n=i(2),o=i(3),r=i(11),s={readDataToLabel:function(){var t=[];if(this._map)for(var e in this._map.autoLabeler._layers2label)if(this._map.getZoom()>this._map.autoLabeler._layers2label[e]._al_options.zoomToStartLabel){var i=this._map.autoLabeler._layers2label[e],o=this._map;i.eachLayer(function(e){if(e.feature&&e.feature.properties[i._al_options.propertyName]){var s=n.createSVGTextNode(e.feature.properties[i._al_options.propertyName],i._al_options.labelStyle),a=n.getBoundingBox(o,s),l=r.labelItem(s,a,e,t);if(l){var u=l.readData();for(t.push(l);u;){var h=r.labelItem(s,a,e,t);u=h.readData(u),t.push(h)}}}})}return t},prepareCurSegments:function(t,e){if(e=e||{},e.maxlabelcount=e.maxlabelcount||100,t.length>e.maxlabelcount||0==t.length)return this._map.autoLabeler._dodebug("too much OR no labels to compute("+t.length+")"),!1;for(var i=0;i<t.length;i++){var n=t[i];0!=n.layer_type()&&1==n.layer_type()&&this._applyLineFeatureData(n)}return!0},_applyLineFeatureData:function(t){t.totalLength=0,t.computed_lengths=o.computeSegmentsLengths(t.data);for(var e=0;e<t.computed_lengths.length;e++)t.totalLength+=t.computed_lengths[e]}};t.exports=s}]);
//# sourceMappingURL=l.autolabelSA.js.map